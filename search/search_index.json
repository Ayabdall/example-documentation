{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The experiments database system is intended to replace an existing desktop application for storing experiments. This system will be a web application that has all the functionality of the existing desktop application with online capabilities and the ability for different users. This system is intended for all participants in a research group. This system will be used to actively store experimental data for a research lab. Project Glossary Attempt An attempt is one data entry recorded from the procedure and assigned to an experiment. Common Attribute - A common attribute is a data column that all subjects have initially. It is pre-defined by the researcher\u2019s data files that the robots create. Custom Attribute - A custom attribute is a user defined data column that does not already exist in the researcher's data files created by the robots. Experiment - An experiment is the collection of subjects and the attempts they have done for a scientific procedure. An example is \u201cSpinal Damage Recovery Experiment (SDRE).\u201d Researcher - A researcher manages the experiments and subjects. They can upload data, add custom attributes, query data, and export their results to an external CSV file. Result - A result is the returned attempts from a search query on some experiments. Results can be exported as an external CSV file. Subject - A subject is an animal used as part of an experiment. Each subject will have a unique ID. Storyboarding This is a storyboard describing user flow, the numbers correspond with something. Use Cases or User Stories User stories can be found under the requirements section here. Techincal Resources Backend: Flask + PostgreSQL Deployment: Docker + k8s + TravisCI Frontend: Vue.js + Buefy Similar Products Digikey Search inventory management <functionalities, with comments on how they may be used for code or inspiration> LORIS Neuroimaging data managemen <functionalities, with comments on how they may be used for code or inspiration> Similar Open-source Projects eLabFTW Experiment notebook software <functionalities, with comments on how they may be used for code or inspiration>","title":"Overview"},{"location":"#overview","text":"The experiments database system is intended to replace an existing desktop application for storing experiments. This system will be a web application that has all the functionality of the existing desktop application with online capabilities and the ability for different users. This system is intended for all participants in a research group. This system will be used to actively store experimental data for a research lab.","title":"Overview"},{"location":"#project-glossary","text":"Attempt An attempt is one data entry recorded from the procedure and assigned to an experiment. Common Attribute - A common attribute is a data column that all subjects have initially. It is pre-defined by the researcher\u2019s data files that the robots create. Custom Attribute - A custom attribute is a user defined data column that does not already exist in the researcher's data files created by the robots. Experiment - An experiment is the collection of subjects and the attempts they have done for a scientific procedure. An example is \u201cSpinal Damage Recovery Experiment (SDRE).\u201d Researcher - A researcher manages the experiments and subjects. They can upload data, add custom attributes, query data, and export their results to an external CSV file. Result - A result is the returned attempts from a search query on some experiments. Results can be exported as an external CSV file. Subject - A subject is an animal used as part of an experiment. Each subject will have a unique ID.","title":"Project Glossary"},{"location":"#storyboarding","text":"This is a storyboard describing user flow, the numbers correspond with something.","title":"Storyboarding"},{"location":"#use-cases-or-user-stories","text":"User stories can be found under the requirements section here.","title":"Use Cases or User Stories"},{"location":"#techincal-resources","text":"Backend: Flask + PostgreSQL Deployment: Docker + k8s + TravisCI Frontend: Vue.js + Buefy","title":"Techincal Resources"},{"location":"#similar-products","text":"Digikey Search inventory management <functionalities, with comments on how they may be used for code or inspiration> LORIS Neuroimaging data managemen <functionalities, with comments on how they may be used for code or inspiration>","title":"Similar Products"},{"location":"#similar-open-source-projects","text":"eLabFTW Experiment notebook software <functionalities, with comments on how they may be used for code or inspiration>","title":"Similar Open-source Projects"},{"location":"design/","text":"Software Design This page includes a short description of the overall architecture style of the system, its high-level system components, and their logical (what data they exchange) and control (how they invoke each other) dependencies. Architecture/Component Diagram This is a short description of the architecture. UML Class Diagram This is a short description of logical entities of the domain in a UML diagram. Sequence Diagram The sequence diagram describes the the core dynamic behaviors of the system.","title":"Software Design"},{"location":"design/#software-design","text":"This page includes a short description of the overall architecture style of the system, its high-level system components, and their logical (what data they exchange) and control (how they invoke each other) dependencies.","title":"Software Design"},{"location":"design/#architecturecomponent-diagram","text":"This is a short description of the architecture.","title":"Architecture/Component Diagram"},{"location":"design/#uml-class-diagram","text":"This is a short description of logical entities of the domain in a UML diagram.","title":"UML Class Diagram"},{"location":"design/#sequence-diagram","text":"The sequence diagram describes the the core dynamic behaviors of the system.","title":"Sequence Diagram"},{"location":"project-management/","text":"Project Management This page provides a general overview of the assigned tasks and roles for the duration of four sprints (subject to change). Story Map Project Plan Sprint 1 Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7 Sprint 2 Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification US 0.1 Traci Townsend February 7 UI Navigation Diagram US 0.2 Kelly King February 7 UML Components and Class Models US 0.4 Maurice Obrien February 7 Release Planning US 0.7 Dallas Taylor February 7 Sprint 3 Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7 Sprint 4 Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7 Roles Here are the general rules for assigning tasks on the team: Back End Development Traci Townsend Johnathan Owens Front End Development Evan Barnes Maurice Obrien \"Floaters\" who can focus on major issues in both Front End Development and Back End Development Dallas Taylor Kelly King (Subject to change throughout the semester as needed - will update if this changes.)","title":"Project Management"},{"location":"project-management/#project-management","text":"This page provides a general overview of the assigned tasks and roles for the duration of four sprints (subject to change).","title":"Project Management"},{"location":"project-management/#story-map","text":"","title":"Story Map"},{"location":"project-management/#project-plan","text":"","title":"Project Plan"},{"location":"project-management/#sprint-1","text":"Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7","title":"Sprint 1"},{"location":"project-management/#sprint-2","text":"Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification US 0.1 Traci Townsend February 7 UI Navigation Diagram US 0.2 Kelly King February 7 UML Components and Class Models US 0.4 Maurice Obrien February 7 Release Planning US 0.7 Dallas Taylor February 7","title":"Sprint 2"},{"location":"project-management/#sprint-3","text":"Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7","title":"Sprint 3"},{"location":"project-management/#sprint-4","text":"Due: February 7 Rubric Description Task To-Do Assigned To Date To Complete By Requirement Specification Create user stories Traci Townsend February 7 UI Navigation Diagram Create the user interface diagram Kelly King February 7 UML Components and Class Models Create UML and Class models Maurice Obrien February 7 Release Planning Create Release Planning Dallas Taylor February 7","title":"Sprint 4"},{"location":"project-management/#roles","text":"Here are the general rules for assigning tasks on the team:","title":"Roles"},{"location":"project-management/#back-end-development","text":"Traci Townsend Johnathan Owens","title":"Back End Development"},{"location":"project-management/#front-end-development","text":"Evan Barnes Maurice Obrien","title":"Front End Development"},{"location":"project-management/#floaters-who-can-focus-on-major-issues-in-both-front-end-development-and-back-end-development","text":"Dallas Taylor Kelly King (Subject to change throughout the semester as needed - will update if this changes.)","title":"\"Floaters\" who can focus on major issues in both Front End Development and Back End Development"},{"location":"requirements/","text":"User Stories User Stories are described with a specific format: blah, blah, and blah. User stories are also further organized using the MoSCoW method (must have, should have, could have, would have) under their own sections. US 1.01 - Authentication As a User I want to authenticate with my University of Alberta account So that I can get access to the app's functionalities. Acceptance Tests Login as user with correct information Input incorrect information and make sure it doesn't allow the user to continue US 1.02 - View Tasks As a User I want to be able to see events/surveys/quizzes that are currently going on for the week So that I can attend theses events if I choose to. Acceptance Tests User should be able to see all of the events in a list as well as all of the surveys and quizzes if they choose to. US 1.03 - View Profile As a User I want to be able to view my profile So that I can see my level, points, my history of attending events, surveys and quizzes. Acceptance Tests Need to ensure the button in the drop-down menu will open. When the profile button is clicked, it will take me to my profile. User input is their specific user data. Must Have US 1.03 - View Profile US 2.89 - Change Password Should Have US 1.23 - Create Account Would Have US 3.21 - Delete Account Could Have US 9.23 - Rainbows and Unicorns","title":"Requirements"},{"location":"requirements/#user-stories","text":"User Stories are described with a specific format: blah, blah, and blah. User stories are also further organized using the MoSCoW method (must have, should have, could have, would have) under their own sections.","title":"User Stories"},{"location":"requirements/#us-101-authentication","text":"As a User I want to authenticate with my University of Alberta account So that I can get access to the app's functionalities. Acceptance Tests Login as user with correct information Input incorrect information and make sure it doesn't allow the user to continue","title":"US 1.01 - Authentication"},{"location":"requirements/#us-102-view-tasks","text":"As a User I want to be able to see events/surveys/quizzes that are currently going on for the week So that I can attend theses events if I choose to. Acceptance Tests User should be able to see all of the events in a list as well as all of the surveys and quizzes if they choose to.","title":"US 1.02 - View Tasks"},{"location":"requirements/#us-103-view-profile","text":"As a User I want to be able to view my profile So that I can see my level, points, my history of attending events, surveys and quizzes. Acceptance Tests Need to ensure the button in the drop-down menu will open. When the profile button is clicked, it will take me to my profile. User input is their specific user data.","title":"US 1.03 - View Profile"},{"location":"requirements/#must-have","text":"US 1.03 - View Profile US 2.89 - Change Password","title":"Must Have"},{"location":"requirements/#should-have","text":"US 1.23 - Create Account","title":"Should Have"},{"location":"requirements/#would-have","text":"US 3.21 - Delete Account","title":"Would Have"},{"location":"requirements/#could-have","text":"US 9.23 - Rainbows and Unicorns","title":"Could Have"}]}